
int ntTpc,runnum,evnum,nKm,nKp,nKK;
vector<int>* pid = new vector<int>;
vector<int>* charge = new vector<int>; vector<int>* isBeam = new vector<int>;
vector<double>* mom0 = new vector<double>;
vector<double>* mom_vtx = new vector<double>;
vector<double>* mom_vty = new vector<double>;
vector<double>* mom_vtz = new vector<double>;
vector<double>* vtx = new vector<double>;
vector<double>* vty = new vector<double>;
vector<double>* vtz = new vector<double>;
vector<double>* helix_cx = new vector<double>;
vector<double>* helix_cy = new vector<double>;
vector<double>* helix_z0 = new vector<double>;
vector<double>* helix_r = new vector<double>;
vector<double>* helix_dz = new vector<double>;
vector<vector<double>>* helix_t = new vector<vector<double>>;
vector<int>* isK18 = new vector<int>;
vector<int>* isKurama = new vector<int>;
vector<double>* closeDist = new vector<double>;
vector<double>* chisqr = new vector<double>;
vector<double>* MissMass = new vector<double>;
vector<double>* PKP = new vector<double>;
vector<double>* PKM = new vector<double>;
vector<double>* xbTPC = new vector<double>;
vector<double>* ybTPC = new vector<double>;
vector<double>* ubTPC = new vector<double>;
vector<double>* vbTPC = new vector<double>;
vector<double>* xsTPC = new vector<double>;
vector<double>* ysTPC = new vector<double>;
vector<double>* usTPC = new vector<double>;
vector<double>* vsTPC = new vector<double>;
vector<int>* combi_id = new vector<int>;
int ntKurama=0,ntK18=0,ntAcc=0;
double MissPx[5],MissPy[5],MissPz[5];
vector<double>KMPX,KMPY,KMPZ;
vector<double>KPPX,KPPY,KPPZ;
int inside[5];
double mpx,mpy,mpz,mm_;
double kmx,kmy,kmz,kpx,kpy,kpz; 
double CosCM,CosLab;
void Clear(){
	ntTpc=0;
	isBeam->clear();
	pid->clear();
	charge->clear();
	chisqr->clear();
	mom0->clear(); mom_vtx->clear(); mom_vty->clear();
	mom_vtz->clear();
	vtx->clear();
	vty->clear();
	vtz->clear();
	closeDist->clear();
	helix_cx->clear();
	helix_cy->clear();
	helix_z0->clear();
	helix_r->clear();
	helix_dz->clear();
	helix_t->clear();
	isK18->clear();
	isKurama->clear();
}
void LoadInputBranches(TTree* tree){
	tree->SetBranchAddress("runnum",&runnum);
	tree->SetBranchAddress("evnum",&evnum);
	tree->SetBranchAddress("ntTpc",&ntTpc);
	tree->SetBranchAddress("isBeam",&isBeam);
	tree->SetBranchAddress("chisqr",&chisqr);
	tree->SetBranchAddress("helix_cx",&helix_cx);
	tree->SetBranchAddress("helix_cy",&helix_cy);
	tree->SetBranchAddress("helix_z0",&helix_z0);
	tree->SetBranchAddress("helix_r",&helix_r);
	tree->SetBranchAddress("helix_dz",&helix_dz);
	tree->SetBranchAddress("helix_t",&helix_t);
	tree->SetBranchAddress("isK18",&isK18);
	tree->SetBranchAddress("isKurama",&isKurama);
//	tree->SetBranchAddress("closeDist",&closeDist);
	tree->SetBranchAddress("mom0",&mom0);
	tree->SetBranchAddress("pid",&pid);
	tree->SetBranchAddress("charge",&charge);
	tree->SetBranchAddress("nKm",&nKm);
	tree->SetBranchAddress("nKp",&nKp);
	tree->SetBranchAddress("nKK",&nKK);
	tree->SetBranchAddress("vtxTPC",&vtx);//"vtx[nKK]/D");
	tree->SetBranchAddress("vtyTPC",&vty);//"vty[nKK]/D");
	tree->SetBranchAddress("vtzTPC",&vtz);//"vtz[nKK]/D");
	tree->SetBranchAddress("inside",inside);
	tree->SetBranchAddress("MissMassCorrDETPC",&MissMass);//"MissPx[nKK]/D");
	tree->SetBranchAddress("pK18",&PKM);
	tree->SetBranchAddress("pTPCKurama",&PKP);
	tree->SetBranchAddress("xbTPC",&xbTPC);
	tree->SetBranchAddress("ybTPC",&ybTPC);
	tree->SetBranchAddress("ubTPC",&ubTPC);
	tree->SetBranchAddress("vbTPC",&vbTPC);
	tree->SetBranchAddress("xsTPC",&xsTPC);
	tree->SetBranchAddress("ysTPC",&ysTPC);
	tree->SetBranchAddress("usTPC",&usTPC);
	tree->SetBranchAddress("vsTPC",&vsTPC);
	tree->SetBranchAddress("CosCM",&CosCM);
	tree->SetBranchAddress("CosLab",&CosLab);

}
double mmpi0 = NAN;
double cdX;
double inv = NAN;
double xiinv = NAN;
double xi0inv = NAN;
double xiCorinv = NAN;
double ldCorinv = NAN;
double lp = 0;
double lagmulti = 0;
double pmom,pimom,ldmom,ldvtx,ldvty,ldvtz,ldpx,ldpy,ldpz,lddist,ldp;
double ximom,xivtx,xivty,xivtz,xipx,xipy,xipz,xip;
double ppx,ppy,ppz,pp;
double xiCormom,xiCorvtx,xiCorvty,xiCorvtz,xiCorpx,xiCorpy,xiCorpz,xiCorp;
double ldCormom,ldCorvtx,ldCorvty,ldCorvtz,ldCorpx,ldCorpy,ldCorpz,ldCorp;
double cdLd,cdXi;
bool Inside,InsideXi,InsideXiCor,ldflg,xiflg,xi0flg,pi0flg,ldflgInvCut,xiflgInvCut,isGood;

double TPCSumM,TPCSumP,TPCSumPx,TPCSumPy,TPCSumPz;
double MissingM,MissingP,MissingPx,MissingPy,MissingPz;
double MissingpKmKpLd,MissingpKmKpLdpm,MissingpKmKpXi,MissingpKmKppm,MissingpKmKpKm;
double KmP,KmPx,KmPy,KmPz,KmPHelix,KmPChisqr;
double KpP,KpPx,KpPy,KpPz,KpPHelix,KpPChisqr;
bool KmCor,KpCor;
double cd_pKmKppm;
double cd_pKmKpLdpm;
double CheckSumM,CheckSumP,CheckSumPx,CheckSumPy,CheckSumPz;
double CosXT;
double MissingMCor,MissingPCor,MissingPxCor,MissingPyCor,MissingPzCor;
double CheckSumMCor,CheckSumPCor,CheckSumPxCor,CheckSumPyCor,CheckSumPzCor;
double Coplanarity = 0;
double MMpKmKp,MM;
double Vtx,Vty,Vtz,VtxCor,VtyCor,VtzCor;
int ent_=0,ntK18_=0,ntKurama_=0,nXi_=0;
int nP = 0,nPi=0,nt=0;
double Chi2Ld,Chi2Xi;
double ProbLd,ProbXi;


void SetOutputBranches(TTree* tree){
	tree->Branch("runnum",&runnum);
	tree->Branch("evnum",&evnum);
	tree->Branch("nP",&nP);
	tree->Branch("nPi",&nPi);
	tree->Branch("nt",&nt);
	tree->Branch("ntKurama",&ntKurama);
	tree->Branch("ntK18",&ntK18);
	tree->Branch("ntAcc",&ntAcc);
	tree->Branch("Vtx",&Vtx);
	tree->Branch("Vty",&Vty);
	tree->Branch("Vtz",&Vtz);
	tree->Branch("VtxCor",&VtxCor);
	tree->Branch("VtyCor",&VtyCor);
	tree->Branch("VtzCor",&VtzCor);
	tree->Branch("cdX",&cdX);
	tree->Branch("InvMLd",&inv);
	tree->Branch("Pmom",&pmom);
	tree->Branch("Pimom",&pimom);
	tree->Branch("FlgLd",&ldflg);
	tree->Branch("FlgLdInvCut",&ldflgInvCut);
	tree->Branch("VtxLd",&ldvtx);
	tree->Branch("VtyLd",&ldvty);
	tree->Branch("VtzLd",&ldvtz);
	tree->Branch("CdLd",&cdLd);
	tree->Branch("MomxLd",&ldpx);
	tree->Branch("MomyLd",&ldpy);
	tree->Branch("MomzLd",&ldpz);
	tree->Branch("MomLd",&ldp);
	tree->Branch("MomxP",&ppx);
	tree->Branch("MomyP",&ppy);
	tree->Branch("MomzP",&ppz);
	tree->Branch("MomP",&pp);
	tree->Branch("DistLd",&lddist);
	tree->Branch("InTargetLd",&Inside);
	tree->Branch("FlgXi",&xiflg);
	tree->Branch("FlgXiInvCut",&xiflgInvCut);
	tree->Branch("InvMXi",&xiinv);
	tree->Branch("VtxXi",&xivtx);
	tree->Branch("VtyXi",&xivty);
	tree->Branch("VtzXi",&xivtz);
	tree->Branch("CdXi",&cdXi);
	tree->Branch("MomxXi",&xipx);
	tree->Branch("MomyXi",&xipy);
	tree->Branch("MomzXi",&xipz);
	tree->Branch("MomXi",&xip);
	tree->Branch("InTargetXi",&InsideXi);
	tree->Branch("LagMulti",&lagmulti);
	tree->Branch("InvMLdCor",&ldCorinv);
	tree->Branch("VtxLdCor",&ldCorvtx);
	tree->Branch("VtyLdCor",&ldCorvty);
	tree->Branch("VtzLdCor",&ldCorvtz);
	tree->Branch("MomxLdCor",&ldCorpx);
	tree->Branch("MomyLdCor",&ldCorpy);
	tree->Branch("MomzLdCor",&ldCorpz);
	tree->Branch("MomLdCor",&ldCorp);
	tree->Branch("mmpi0",&mmpi0);
	tree->Branch("Flgpi0",&pi0flg);
	tree->Branch("InvMXi0",&xi0inv);
	tree->Branch("FlgXi0",&xi0flg);
	tree->Branch("isGood",&isGood);
	tree->Branch("MissMassCor",&MissMass[0]);//"MissPx[nKK]/D");
	tree->Branch("MissMomxCor",&MissPx[0]);//"MissPx[nKK]/D");
	tree->Branch("MissMomyCor",&MissPy[0]);//"MissPy[nKK]/D");
	tree->Branch("MissMomzCor",&MissPz[0]);//"MissPz[nKK]/D");
	tree->Branch("TPCSumM",&TPCSumM);
	tree->Branch("TPCSumP",&TPCSumP);
	tree->Branch("TPCSumPx",&TPCSumPx);
	tree->Branch("TPCSumPy",&TPCSumPy);
	tree->Branch("TPCSumPz",&TPCSumPz);
	tree->Branch("MissingM",&MissingM);
	tree->Branch("MissingP",&MissingP);
	tree->Branch("MissingPx",&MissingPx);
	tree->Branch("MissingPy",&MissingPy);
	tree->Branch("MissingPz",&MissingPz);
	tree->Branch("KmCor",&KmCor);
	tree->Branch("KmP",&KmP);
	tree->Branch("KmPHelix",&KmPHelix);
	tree->Branch("KmPChisqr",&KmPChisqr);
	tree->Branch("KmPx",&kmx);
	tree->Branch("KmPy",&kmy);
	tree->Branch("KmPz",&kmz);
	tree->Branch("KpP",&KpP);
	tree->Branch("KpCor",&KpCor);
	tree->Branch("KpPHelix",&KpPHelix);
	tree->Branch("KpPChisqr",&KpPChisqr);
	tree->Branch("KpPx",&kpx);
	tree->Branch("KpPy",&kpy);
	tree->Branch("KpPz",&kpz);
	tree->Branch("CheckSumM",&CheckSumM);
	tree->Branch("CheckSumP",&CheckSumP);
	tree->Branch("CheckSumPx",&CheckSumPx);
	tree->Branch("CheckSumPy",&CheckSumPy);
	tree->Branch("CheckSumPz",&CheckSumPz);
	tree->Branch("CosXT",&CosXT);
	tree->Branch("MissingMCor",&MissingMCor);
	tree->Branch("MissingPCor",&MissingPCor);
	tree->Branch("MissingPxCor",&MissingPxCor);
	tree->Branch("MissingPyCor",&MissingPyCor);
	tree->Branch("MissingPzCor",&MissingPzCor);
	tree->Branch("CheckSumMCor",&CheckSumMCor);
	tree->Branch("CheckSumPCor",&CheckSumPCor);
	tree->Branch("CheckSumPxCor",&CheckSumPxCor);
	tree->Branch("CheckSumPyCor",&CheckSumPyCor);
	tree->Branch("CheckSumPzCor",&CheckSumPzCor);
	tree->Branch("Coplanarity",&Coplanarity);
	tree->Branch("MissingpKmKpLd",&MissingpKmKpLd);
	tree->Branch("MissingpKmKpLdpm",&MissingpKmKpLdpm);
	tree->Branch("MissingpKmKpXi",&MissingpKmKpXi);
	tree->Branch("MissingpKmKppm",&MissingpKmKppm);
	tree->Branch("cdpKmKppm",&cd_pKmKppm);
	tree->Branch("MissingpKmKpKm",&MissingpKmKpKm);
	tree->Branch("MMpKmKp",&MMpKmKp);
	tree->Branch("MM",&MM);
	tree->Branch("CosCM",&CosCM);
	tree->Branch("CosLab",&CosLab);
	tree->Branch("Chi2Ld",&Chi2Ld);
	tree->Branch("Chi2Xi",&Chi2Xi);
	tree->Branch("ProbLd",&ProbLd);
	tree->Branch("ProbXi",&ProbXi);
}
